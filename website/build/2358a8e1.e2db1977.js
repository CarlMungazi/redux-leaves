(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{147:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return d}));var a=n(1),r=n(10),o=(n(0),n(185)),c={id:"advanced-example",title:"Advanced example",hide_title:!0,sidebar_label:"Advanced example"},i={id:"examples/advanced-example",title:"Advanced example",description:"# Advanced example: bundling actions, custom types and controlling payloads",source:"@site/../docs/examples/advancedExample.md",permalink:"/docs/examples/advanced-example",sidebar_label:"Advanced example",sidebar:"docs",previous:{title:"Intermediate example",permalink:"/docs/examples/intermediate-example"},next:{title:"Using with useReducer instead of Redux",permalink:"/docs/examples/usereducer-example"}},s=[{value:"Bundling actions",id:"bundling-actions",children:[]},{value:"Custom action types",id:"custom-action-types",children:[{value:"Default action types",id:"default-action-types",children:[]},{value:"Overriding the default action type",id:"overriding-the-default-action-type",children:[]},{value:"Usage pattern",id:"usage-pattern",children:[]}]},{value:"Controlling payloads",id:"controlling-payloads",children:[]}],l={rightToc:s};function d(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"advanced-example-bundling-actions-custom-types-and-controlling-payloads"},"Advanced example: bundling actions, custom types and controlling payloads"),Object(o.b)("h2",{id:"bundling-actions"},"Bundling actions"),Object(o.b)("p",null,"Perhaps you're worried that the atomic actions you're creating at each leaf will cause too much rerendering or clog up your Redux DevTools inspector."),Object(o.b)("p",null,"You can bundle together actions with ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"/docs/api/bundle"}),Object(o.b)("inlineCode",{parentName:"a"},"bundle")),", to produce a new compound action that will update your store's state in a single ",Object(o.b)("inlineCode",{parentName:"p"},"dispatch"),"."),Object(o.b)("p",null,Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://runkit.com/richardcrng/redux-leaves-bundling-actions"}),"Bundling example on Runkit")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { createStore } from 'redux'\nimport reduxLeaves, { bundle } from 'redux-leaves'\n\nconst initialState = {\n  list: ['a', 'b'],\n  nested: {\n    counter: 0,\n    state: {\n      deep: 'somewhat'\n    }\n  }\n}\n\nconst [reducer, actions] = reduxLeaves(initialState)\nconst store = createStore(reducer)\n\nconst actionBundle = bundle([\n  actions.list.create.push('c'),\n  actions.nested.counter.create.increment(5),\n  actions.nested.state.create.set('arbitrary', true)\n])\n\nstore.dispatch(actionBundle)\nconsole.log(store.getState())\n/*\n  {\n    list: ['a', 'b', 'c'],\n    nested: {\n      counter: 5,\n      state: {\n        arbitrary: true,\n        deep: 'somewhat'\n      }\n    }\n  }\n*/\n")),Object(o.b)("h2",{id:"custom-action-types"},"Custom action types"),Object(o.b)("h3",{id:"default-action-types"},"Default action types"),Object(o.b)("p",null,"When you create an action through Redux-Leaves - whether using a default creator or some custom reducer logic you've supplied - it gives the action an informative ",Object(o.b)("inlineCode",{parentName:"p"},"type")," property:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { createStore } from 'redux'\nimport reduxLeaves from 'redux-leaves'\n\nconst initialState = {\n  list: ['a', 'b'],\n  nested: {\n    counter: 0,\n    state: {\n      deep: 'somewhat'\n    }\n  }\n}\n\nconst reducersDict = {\n  duplicate: leafState => leafState.concat(leafState)\n}\n\nconst [reducer, actions] = reduxLeaves(initialState, reducersDict)\n\nconst actionToPushToList = actions.list.create.push('c')\nconsole.log(actionToPushToList.type) // 'list/PUSH'\n\nconst actionToDuplicateList = actions.list.create.duplicate()\nconsole.log(actionToDuplicateList.type) // 'list/DUPLICATE'\n\nconst actionToUpdateDeepState = actions.nested.state.deep.create.update('could go deeper')\nconsole.log(actionToUpdateDeepState.payload)\n// 'nested/state/deep/UPDATE'\n")),Object(o.b)("h3",{id:"overriding-the-default-action-type"},"Overriding the default action type"),Object(o.b)("p",null,"You may find benefits, e.g. with Redux DevTools, to overriding the default action type."),Object(o.b)("p",null,"You can do this by providing a string argument to ",Object(o.b)("inlineCode",{parentName:"p"},"create"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const appendLetter = actions.list.create('APPEND_LETTER').push\nconsole.log(appendLetter('c').type) // 'APPEND_LETTER'\n\nconst duplicateList = actions.list.create('DUPLICATE_LIST').duplicate\nconsole.log(duplicateList().type) // 'DUPLICATE LIST'\n")),Object(o.b)("p",null,"Overriding the default action type won't change how the Redux-Leaves ",Object(o.b)("inlineCode",{parentName:"p"},"reducer")," responds to the action:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const store = createStore(reducer)\nconsole.log(store.getState().list) // ['a', 'b']\n\nstore.dispatch(appendLetter('c'))\nconsole.log(store.getState().list) // ['a', 'b', 'c']\n\nstore.dispatch(duplicateList())\nconsole.log(store.getState().list)\n// ['a', 'b', 'c', 'a', 'b', 'c']\n")),Object(o.b)("h3",{id:"usage-pattern"},"Usage pattern"),Object(o.b)("p",null,"An expected pattern that this facilitates is the defining of action creators in one file, e.g. ",Object(o.b)("inlineCode",{parentName:"p"},"actions.js"),":"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"// import the actions object created by Redux-Leaves\nimport { actions } from './some/location'\n\nexport const incrementCounter = actions.counter.create('INCREMENT_COUNTER').increment\nexport const updateDeepState = actions.nested.state.deep.create('UPDATE_DEEP_STATE').update\n")),Object(o.b)("p",null,"and then import these action creators into whichever file needs access to them."),Object(o.b)("h2",{id:"controlling-payloads"},"Controlling payloads"),Object(o.b)("p",null,"Suppose I want to create a custom creator, ",Object(o.b)("inlineCode",{parentName:"p"},"addMultiple"),", such that I can pass multiple numbers as arguments and have them all added to a given leaf's state."),Object(o.b)("p",null,"The default behaviour of a custom action creator is that only the first argument is passed as an action's payload, but we can configure that:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { createStore } from 'redux'\nimport reduxLeaves from 'redux-leaves'\n\nconst initialState = {\n  counter: 0\n}\n\nconst reducersDict = {\n  // object configuration longhand\n  addMultiple: {\n    // Capture all arguments and pass them to the reducer:\n    argsToPayload: (...args) => args,\n    reducer: (leafState, { payload }) => payload.reduce((acc, val) => acc + val, leafState)\n  },\n\n  // function shorthand\n  // uses default payload behaviour\n  addFirstThing: (leafState, { payload }) => leafState + payload\n}\n\nconst [reducer, actions] = reduxLeaves(initialState, reducersDict)\nconst store = createStore(reducer)\n\nconsole.log(store.getState().counter) // 0\n\nstore.dispatch(actions.counter.create.addMultiple(4, 2, 10))\nconsole.log(store.getState().counter) // 16\n\nstore.dispatch(actions.counter.create.addFirstThing(1, 100))\nconsole.log(store.getState().counter) // 17\n")))}d.isMDXComponent=!0},185:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),d=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i({},t,{},e)),n},p=function(e){var t=d(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=Object(a.forwardRef)((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),p=d(n),b=a,m=p["".concat(c,".").concat(b)]||p[b]||u[b]||o;return n?r.a.createElement(m,i({ref:t},l,{components:n})):r.a.createElement(m,i({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,c=new Array(o);c[0]=b;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,c[1]=i;for(var l=2;l<o;l++)c[l]=n[l];return r.a.createElement.apply(null,c)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"}}]);