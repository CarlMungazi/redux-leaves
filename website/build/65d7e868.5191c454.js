(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{160:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return o})),a.d(t,"metadata",(function(){return i})),a.d(t,"rightToc",(function(){return l})),a.d(t,"default",(function(){return s}));var n=a(1),r=a(10),c=(a(0),a(185)),o={id:"leaf-reducers",title:"Leaf Reducers",hide_title:!0,sidebar_label:"Leaf reducers"},i={id:"api/leaf-reducers",title:"Leaf Reducers",description:"# Leaf reducers",source:"@site/../docs/api/leafReducers.md",permalink:"/docs/api/leaf-reducers",sidebar_label:"Leaf reducers",sidebar:"docs",previous:{title:"bundle",permalink:"/docs/api/bundle"},next:{title:"Creator Keys",permalink:"/docs/api/creator-keys"}},l=[{value:"Syntax",id:"syntax",children:[{value:"Function (shorthand)",id:"function-shorthand",children:[]},{value:"Configuration object (longhand)",id:"configuration-object-longhand",children:[]}]},{value:"Configuration keys",id:"configuration-keys",children:[{value:"<code>reducer</code>",id:"reducer",children:[]},{value:"<code>argsToPayload</code>",id:"argstopayload",children:[]}]}],b={rightToc:l};function s(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(c.b)("wrapper",Object(n.a)({},b,a,{components:t,mdxType:"MDXLayout"}),Object(c.b)("h1",{id:"leaf-reducers"},"Leaf reducers"),Object(c.b)("p",null,"A leaf reducer is a function or configuration object that updates the state of an arbitrary leaf in your state tree."),Object(c.b)("p",null,"They are:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},"passed into ",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/redux-leaves"}),Object(c.b)("inlineCode",{parentName:"a"},"reduxLeaves"))," with a unique ",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"creatorKey.md"}),Object(c.b)("inlineCode",{parentName:"a"},"creatorKey"))," as part of ",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/redux-leaves#reducersdict"}),Object(c.b)("inlineCode",{parentName:"a"},"reducersDict")),"; and"),Object(c.b)("li",{parentName:"ul"},"triggered at an arbitrary leaf only by dispatching an action created by the leaf's ",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"/docs/api/create#createcreatorkey"}),Object(c.b)("inlineCode",{parentName:"a"},"create[creatorKey]"))," method.")),Object(c.b)("h2",{id:"syntax"},"Syntax"),Object(c.b)("h3",{id:"function-shorthand"},"Function (shorthand)"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const shorthandFunction = (leafState, action, treeState) => {\n  // some logic here\n  // return the new leafState\n}\n")),Object(c.b)("h3",{id:"configuration-object-longhand"},"Configuration object (longhand)"),Object(c.b)("p",null,"The above leafReducer function is shorthand for a configuration object with presets:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const longhandConfig = {\n  reducer: shorthandFunction,\n\n  // below are the configuration keys and their default values\n\n  argsToPayload: firstArgOnly => firstArgOnly,\n  // by default, if the action creator is invoked with arguments,\n  //  the first argument only becomes the action's payload property.\n}\n")),Object(c.b)("p",null,"Using the configuration object longhand allows greater customisation, through additional ",Object(c.b)("a",Object(n.a)({parentName:"p"},{href:"#configuration-keys"}),"configuration keys"),"."),Object(c.b)("h2",{id:"configuration-keys"},"Configuration keys"),Object(c.b)("p",null,"The list of configuration keys that can be provided are below:"),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Key"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Value (type)"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"),Object(c.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Optional?"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("a",Object(n.a)({parentName:"td"},{href:"#reducer"}),Object(c.b)("inlineCode",{parentName:"a"},"reducer"))),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"function"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Updates the leaf's state"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}))),Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(c.b)("a",Object(n.a)({parentName:"td"},{href:"#argstopayload"}),Object(c.b)("inlineCode",{parentName:"a"},"argsToPayload"))),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"function"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Converts action creator arguments to an action payload"),Object(c.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Optional")))),Object(c.b)("h3",{id:"reducer"},Object(c.b)("inlineCode",{parentName:"h3"},"reducer")),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"(function)"),": Updates the leaf's state."),Object(c.b)("h4",{id:"arguments"},"Arguments"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"leafState")," ",Object(c.b)("em",{parentName:"li"},"(any)"),": the current state of the given leaf"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"action")," ",Object(c.b)("em",{parentName:"li"},"(object)"),": the action created"),Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"treeState")," ",Object(c.b)("em",{parentName:"li"},"(object)"),": the current state of the entire Redux store")),Object(c.b)("h4",{id:"returns"},"Returns"),Object(c.b)("p",null,"The new state value for the leaf."),Object(c.b)("h3",{id:"argstopayload"},Object(c.b)("inlineCode",{parentName:"h3"},"argsToPayload")),Object(c.b)("p",null,Object(c.b)("em",{parentName:"p"},"(function, optional)"),": Converts action creator arguments to an action payload."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Default behaviour:")," if a first argument is provided, it is supplied as the action's payload. All other arguments are discarded."),Object(c.b)("h4",{id:"arguments-1"},"Arguments"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("inlineCode",{parentName:"li"},"...args"),": the arguments supplied to an action creator that triggers ",Object(c.b)("a",Object(n.a)({parentName:"li"},{href:"#reducer"}),Object(c.b)("inlineCode",{parentName:"a"},"reducer")))),Object(c.b)("h4",{id:"returns-1"},"Returns"),Object(c.b)("p",null,"A ",Object(c.b)("inlineCode",{parentName:"p"},"payload")," used by the action creator."),Object(c.b)("h4",{id:"examples"},"Examples"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"// Action payload is the first argument only (default behaviour)\nconst firstArgToPayload = firstArgOnly => firstArgOnly\n\n// Action payload as an array of the first 5 arguments\nconst firstFiveArgsToPayload = (...args) => args.slice(0, 5)\n\n// Action payload as an object\nconst spreadArgsToObjectPayload = (first, second, ...rest) => ({ first, second, rest })\n")),Object(c.b)("p",null,"We can check that these are behaving as expected:"),Object(c.b)("pre",null,Object(c.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"// Test them out by creating actions using reduxLeaves\nconst returnPayload = (leafState, { payload }) => payload\n[\n  firstArgToPayload,\n  firstFiveArgsToPayload,\n  spreadArgsToObjectPayload\n].forEach(argsToPayload => {\n  // Use each as an argsToPayload\n  const returnPayload = {\n    reducer: (leafState, { payload }) => payload,\n    argsToPayload\n  }\n  const [reducer, actions] = reduxLeaves({}, { returnPayload })\n  // log out the payload for an action passed seven arguments\n  console.log(actions.create.returnPayload(1, 2, 3, 4, 5, 6, 7).payload)\n})\n\n// 1\n// [1, 2, 3, 4, 5]\n// { first: 1, second: 2, rest: [3, 4, 5, 6, 7] }\n")))}s.isMDXComponent=!0},185:function(e,t,a){"use strict";a.d(t,"a",(function(){return d})),a.d(t,"b",(function(){return O}));var n=a(0),r=a.n(n);function c(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){c(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},c=Object.keys(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(n=0;n<c.length;n++)a=c[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var b=r.a.createContext({}),s=function(e){var t=r.a.useContext(b),a=t;return e&&(a="function"==typeof e?e(t):i({},t,{},e)),a},d=function(e){var t=s(e.components);return r.a.createElement(b.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},p=Object(n.forwardRef)((function(e,t){var a=e.components,n=e.mdxType,c=e.originalType,o=e.parentName,b=l(e,["components","mdxType","originalType","parentName"]),d=s(a),p=n,O=d["".concat(o,".").concat(p)]||d[p]||u[p]||c;return a?r.a.createElement(O,i({ref:t},b,{components:a})):r.a.createElement(O,i({ref:t},b))}));function O(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var c=a.length,o=new Array(c);o[0]=p;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:n,o[1]=i;for(var b=2;b<c;b++)o[b]=a[b];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,a)}p.displayName="MDXCreateElement"}}]);